language: c

sudo: false

addons:
  apt:
    packages:
      - ruby
      - enchant

notifications:
  email: false

env:
  global:
    # We add astropy-ci-extras to have the latest version of Astropy with older Numpy versions.
    - CONDA_CHANNELS="astropy-ci-extras astropy glueviz"
    - ASTROPY_VERSION=stable
    - NUMPY_VERSION=1.13
    - NO_CFG_FILES=false
    - QT_PKG=pyqt5
    - SETUP_XVFB=True
    - CONDA_DEPENDENCIES="pip dill ipython matplotlib scipy cython h5py pygments pyzmq scikit-image pandas sphinx xlrd pillow pytest mock pyyaml qtpy traitlets ipykernel qtconsole spectral-cube bottleneck mpl-scatter-density"
    - PIP_DEPENDENCIES="pyavm astrodendro plotly<3.8 objgraph pytest-qt flake8 git+https://github.com/rtfd/sphinx_rtd_theme"
    - PIP_FALLBACK=false

matrix:

    # Don't wait for allowed failures
    fast_finish: true

    include:

        # Test on Python 2.7
        - os: linux
          env: PYTHON_VERSION=2.7

        # Test without any Qt installation, which will also cause all qt
        # sub-directories to be removed, to make sure that no non-Qt code has
        # any dependence on Qt code.
        - os: linux
          env: PYTHON_VERSION=3.6
               PIP_DEPENDENCIES="pyavm astrodendro plotly objgraph flake8"
               QT_PKG=False

before_install:

  # Prepare dependency list.
  - if [[ $QT_PKG == pyside2 ]]; then export CONDA_DEPENDENCIES="pyside2 "$CONDA_DEPENDENCIES; fi
  - if [[ $QT_PKG == pyqt5 ]]; then export CONDA_DEPENDENCIES="pyqt=5 "$CONDA_DEPENDENCIES; fi

  # Documentation dependencies
  - if [ $DOC_TRIGGER ]; then export PIP_DEPENDENCIES="sphinx-automodapi sphinxcontrib-spelling numpydoc requests "$PIP_DEPENDENCIES; fi

  # Install ci-helpers and set up conda
  - git clone git://github.com/astropy/ci-helpers.git
  - source ci-helpers/travis/setup_conda.sh

  # now set up a plugin configuration file with some plugins disabled. This is
  # to make sure that when we run the tests, glue will ignore this
  # configuration and will instead run tests for all plugins.
  - if [[ $NO_CFG_FILES == false ]]; then mkdir ~/.glue; printf "[plugins]\nspectrum_tool = 0\n" >> ~/.glue/plugins.cfg; fi

install:

  - LC_ALL=C

  # Uninstall PyQt if we are using PySide
  - if [ $QT_PKG == pyside2 ]; then conda remove --no-pin --force pyqt sip || true; fi

  # Uninstall any version of Qt if QT_PKG is False, and remove all qt
  # sub-directories
  - if [[ $QT_PKG == False ]]; then
      sed -i.bak '/qtpy/d' setup.py;
      sed -i.bak '/sys.exit(1)/d' setup.py;
      conda remove --no-pin --force pyqt || true;
      conda remove --no-pin --force pyside || true;
      conda remove --no-pin --force pyside2 || true;
      conda remove --no-pin --force qt || true;
      find . -name "qt" -type d -exec rm -r {} \; || true;
      rm glue/external/qt.py || true;
      sed -i.bak 's/in REQUIRED_PLUGINS/in REQUIRED_PLUGINS and False/' glue/main.py || true;
    fi

  # Set MPLBACKEND to Agg by default - this will get overriden if Qt is present,
  # but it avoids having Matplotlib default to the osx backend on MacOS X
  - export MPLBACKEND='Agg';

  # On Python 2.7 we need to downgrade attrs
  - if [ $PYTHON_VERSION == 2.7 ]; then conda install attrs=17.2.0; fi

  # List installed packages - use the export command so as to be able to
  # reproduce the exact environment locally. Do this before installing glue
  # since we don't want glue to appear in the list of packages for the
  # environment.
  - conda env export

  # We need to install glue in order to make sure that the entry points are
  # installed.
  - pip install . --no-deps --verbose

  # Check that all the plugins load correctly
  - python -c 'from glue.logger import logger; logger.setLevel("DEBUG"); from glue.main import load_plugins; load_plugins()'

  # List installed packages again - just to check if any packages got installed
  # in the previous step.
  - conda env export

script:

  # In the following, we make sure there are no font sizes hard-coded in *.ui files.
  # We do this because the default application font size may change on different
  # platforms, but the sizes in ui files are absolute, which can lead to mismatched
  # font sizes.
  - find glue -name "*.ui" -exec grep "pointsize" {} \; >& font.log
  - test ! -s font.log

  - if [[ $QT_PKG == False ]]; then glue --version; fi

  # Do style checks
  - flake8 --max-line-length=100 --exclude=external glue

  - pytest --durations=20 -vs $PYTEST_ARGS glue

  # In the following, we use separate if statements for each line, to make
  # sure the exit code from each one is taken into account for the overall
  # exit code.
  - if [ $DOC_TRIGGER ]; then ./.test-docs.sh; fi

  # Check spelling
  # - if [ $DOC_TRIGGER ]; then make spelling; fi
